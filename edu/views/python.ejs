<html>
<head>
<title> Python </title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="keywords" content="Mastering Responsive web template, Bootstrap Web Templates, Flat Web Templates, Android Compatible web template, 
Smartphone Compatible web template, free webdesigns for Nokia, Samsung, LG, SonyEricsson, Motorola web design" />
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //custom-theme -->
<link href="../static/css/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="../static/css/JiSlider.css" rel="stylesheet"> 
<link rel="stylesheet" href="../static/css/flexslider.css" type="text/css" media="screen" property="" />

<link href="../static/css/style.css" rel="stylesheet" type="text/css" media="all" />

<!-- font-awesome-icons -->
<link href="../static/css/font-awesome.css" rel="stylesheet"> 
<!-- //font-awesome-icons -->
<link href="//fonts.googleapis.com/css?family=Raleway:400,400i,500,500i,600,600i,700,700i,800" rel="stylesheet">
<link href='//fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>

	<link rel="stylesheet" href="../../static/css/login.css">
	<style>
	h2{
	font-family:montserrat;
		text-decoration: underline black;
		color:blue;
		}
	</style>
</head>
<body style="background-color:white;" >


<img src="../static/images/python.png" width="100%" height="90%" >
<div class="container">
	<h2 style="margin-top:50px;" >What is Python </h2>

Python is a general purpose, dynamic, high-level, and interpreted programming language. It supports Object Oriented programming approach to develop applications. It is simple and easy to learn and provides lots of high-level data structures.
Python is easy to learn yet powerful and versatile scripting language, which makes it attractive for Application Development.
Python's syntax and dynamic typing with its interpreted nature make it an ideal language for scripting and rapid application development.
Python supports multiple programming pattern, including object-oriented, imperative, and functional or procedural programming styles.
Python is not intended to work in a particular area, such as web programming. That is why it is known as multipurpose programming language because it can be used with web, enterprise, 3D CAD, etc.
We don't need to use data types to declare variable because it is dynamically typed so we can write a=10 to assign an integer value in an integer variable.
Python makes the development and debugging fast because there is no compilation step included in Python development, and edit-test-debug cycle is very fast.
<br><br>
<h2>Where is Python used?</h2>

Python is a general-purpose, popular programming language and it is used in almost every technical field. The various areas of Python use are given below.<br>
o	Data Science<br>
o	Date Mining<br>
o	Desktop Applications<br>
o	Console-based Applications<br>
o	Mobile Applications<br>
o	Software Development<br>
o	Artificial Intelligence<br>
o	Web Applications<br>
o	Enterprise Applications<br>
o	3D CAD Applications<br>
o	Machine Learning<br>
o	Computer Vision or Image Processing Applications.<br>
o	Speech Recognitions<br>

<br>
<h2>Why learn Python?</h2>

Python provides many useful features to the programmer. These features make it most popular and widely used language. We have listed below few-essential feature of Python.<br>
o	Easy to use and Learn<br>
o	Expressive Language<br>
o	Interpreted Language<br>
o	Object-Oriented Language<br>
o	Open Source Language<br>
o	Extensible<br>
o	Learn Standard Library<br>
o	GUI Programming Support<br>
o	Integrated<br>
o	Embeddable<br>
o	Dynamic Memory Allocation<br>
o	Wide Range of Libraries and Frameworks<br><br>



<h2>Python basic Syntax?</h2>
There is no use of curly braces or semicolon in Python programming language. It is English-like language. But Python uses the indentation to define a block of code. Indentation is nothing but adding whitespace before the statement when it is needed. For example -
<br>1.	def func():  <br>
2.	       statement 1  <br>
3.	       statement 2  <br>
4.	       …………………  <br>
5.	       …………………  <br>
6.	         statement N  <br>
In the above example, the statements that are same level to right belong to the function. Generally, we can use four whitespaces to define indentation.
<br><br>
<h2>Python First Program</h2>
Unlike the other programming languages, Python provides the facility to execute the code using few lines. For example - Suppose we want to print the "Hello World" program in Java; it will take three lines to print it.
<br>1.	public class HelloWorld {  <br>
2.	 public static void main(String[] args){  <br>
3.	// Prints "Hello, World" to the terminal window.  <br>
4.	  System.out.println("Hello World");  <br>
5.	 }  <br>
6.	 }  <br>
On the other hand, we can do this using one statement in Python.<br>
1.	print("Hello World")  <br>
Both programs will print the same result, but it takes only one statement without using a semicolon or curly braces in Python.<br>
<br>
<h2>Taking Input to the User</h2>
Python provides the input() function which is used to take input from the user. Let's understand the following example.<br>
Example -<br>
1.	name = input("Enter a name of student:")  <br>
2.	print("The student name is: ", name)  <br>
Output:<br>
Enter a name of student: Devansh<br>
The student name is:   Devansh<br>
By default, the input() function takes the string input but what if we want to take other data types as an input.<br>
If we want to take input as an integer number, we need to typecast the input() function into an integer.<br>
For example -<br>

1.	a  = int(input("Enter first number: "))  <br>
2.	b = int(input("Enter second number: "))  <br>
3.	  <br>
4.	print(a+b)  <br>
Output:<br>
Enter first number: 50<br>
Enter second number: 100<br>
150<br>
We can take any type of values using input() function.<br>
<br>

<h2>Taking Input to the User</h2>
Python provides the input() function which is used to take input from the user. Let's understand the following example.<br>
Example -<br>
1.	name = input("Enter a name of student:")  
2.	print("The student name is: ", name)  <br>
Output:<br>
Enter a name of student: Devansh<br>
The student name is:   Devansh<br>
By default, the input() function takes the string input but what if we want to take other data types as an input.<br>
If we want to take input as an integer number, we need to typecast the input() function into an integer.<br>
For example -<br>

1.	a  = int(input("Enter first number: "))  <br>
2.	b = int(input("Enter second number: "))  <br>
3.	  
4.	print(a+b)  <br>
Output:<br>
Enter first number: 50<br>
Enter second number: 100<br>
150<br>
We can take any type of values using input() function.<br>
<br>
<h2>Python Variables</h2>
Variable is a name that is used to refer to memory location. Python variable is also known as an identifier and used to hold value.<br>
In Python, we don't need to specify the type of variable because Python is a infer language and smart enough to get variable type.<br>
Variable names can be a group of both the letters and digits, but they have to begin with a letter or an underscore.<br>
It is recommended to use lowercase letters for the variable name. Rahul and rahul both are two different variables.<br>
<br>
<h2>Identifier Naming</h2>
Variables are the example of identifiers. An Identifier is used to identify the literals used in the program. The rules to name an identifier are given below.<br>
o	The first character of the variable must be an alphabet or underscore ( _ ).<br>
o	All the characters except the first character may be an alphabet of lower-case(a-z), upper-case (A-Z), underscore, or digit (0-9).<br>
o	Identifier name must not contain any white-space, or special character (!, @, #, %, ^, &, *).<br>
o	Identifier name must not be similar to any keyword defined in the language.<br>
o	Identifier names are case sensitive; for example, my name, and MyName is not the same.<br>
o	Examples of valid identifiers: a123, _n, n_9, etc.<br>
o	Examples of invalid identifiers: 1a, n%4, n 9, etc.
<br><br>
<h2>Python Data Types</h2>
Variables can hold values, and every value has a data-type. Python is a dynamically typed language; hence we do not need to define the type of the variable while declaring it. The interpreter implicitly binds the value with its type.
<br>1.	a = 5  <br>
The variable a holds integer value five and we did not define its type. Python interpreter will automatically interpret variables a as an integer type.<br>
Python enables us to check the type of the variable used in the program. Python provides us the type() function, which returns the type of the variable passed.<br>

 <br>

<h2>Python Operators</h2>
The operator can be defined as a symbol which is responsible for a particular operation between two operands. Operators are the pillars of a program on which the logic is built in a specific programming language. Python provides a variety of operators, which are described as follows.<br>
o	Arithmetic operators<br>
o	Comparison operators<br>
o	Assignment Operators<br>
o	Logical Operators<br>
o	Bitwise Operators<br>
o	Membership Operators<br>
o	Identity Operators<br>
<b>Arithmetic Operators</b><br>
Arithmetic operators are used to perform arithmetic operations between two operands. It includes + (addition), - (subtraction), *(multiplication), /(divide), %(reminder), //(floor division), and exponent (**) operators.
<br><b>Comparison operator</b><br>
Comparison operators are used to comparing the value of the two operands and returns Boolean true or false accordingly. 
<br><b>ssignment Operators</b><br>
The assignment operators are used to assign the value of the right expression to the left operand. 
<br><b>Bitwise Operators</b><br>
The bitwise operators perform bit by bit operation on the values of the two operands.
<br><b>Logical Operators</b><br>
The logical operators are used primarily in the expression evaluation to make a decision. 
<br><b>Membership Operators</b><br>
Python membership operators are used to check the membership of value inside a Python data structure. If the value is present in the data structure, then the resulting value is true otherwise it returns false.
<br><b>Identity Operators</b><br>
The identity operators are used to decide whether an element certain class or type.
<br><b>Operator Precedence</b><br>
The precedence of the operators is essential to find out since it enables us to know which operator should be evaluated first

<br>

<br>

<h2>Python If-else statements</h2>
Decision making is the most important aspect of almost all the programming languages. As the name implies, decision making allows us to run a particular block of code for a particular decision. Here, the decisions are made on the validity of the particular conditions. Condition checking is the backbone of decision making.
<br>
The if statement<br>
The if statement is used to test a particular condition and if the condition is true, it executes a block of code known as if-block. The condition of if statement can be any valid logical expression which can be either evaluated to true or false.
 <br>



The syntax of the if-statement is given below.<br>
1.	if expression:  <br>
2.	    statement  <br>
Example 1<br>
1.	num = int(input("enter the number?"))  <br>
2.	if num%2 == 0:  <br>
3.	    print("Number is even")  <br>
Output:<br>
enter the number?10<br>
Number is even<br><br>

<h2>Python Loops</h2>
The flow of the programs written in any programming language is sequential by default. Sometimes we may need to alter the flow of the program. The execution of a specific code may need to be repeated several numbers of times.
<br>For this purpose, The programming languages provide various types of loops which are capable of repeating some specific code several numbers of times. Consider the following diagram to understand the working of a loop statement.
 <br>
<br>
<h2>Why we use loops in python?</h2>
The looping simplifies the complex problems into the easy ones. It enables us to alter the flow of the program so that instead of writing the same code again and again, we can repeat the same code for a finite number of times. For example, if we need to print the first 10 natural numbers then, instead of using the print statement 10 times, we can print inside a loop which runs up to 10 iterations.
<br>
<br>

<h2>Python for loop</h2>
The for loop in Python is used to iterate the statements or a part of the program several times. It is frequently used to traverse the data structures like list, tuple, or dictionary.
<br>The syntax of for loop in python is given below.<br>
1.	for iterating_var in sequence:    <br>
2.	    statement(s)   
<br><br>
<h2>The for loop flowchart</h2>
For loop Using Sequence<br>
Example-1: Iterating string using for loop<br>
1.	str = "Python"  <br>
2.	for i in str:  <br>
3.	    print(i)  <br>
Output:<br>
P<br>
y<br>
t<br>
h<br>
o<br>
n<br>

<br>
<h2>Python While loop</h2>
The Python while loop allows a part of the code to be executed until the given condition returns false. It is also known as a pre-tested loop.<br>
It can be viewed as a repeating if statement. When we don't know the number of iterations then the while loop is most effective to use.<br>
The syntax is given below.<br>
1.	while expression:    <br>
2.	    statements    <br>
Here, the statements can be a single statement or a group of statements. The expression should be any valid Python expression resulting in true or false. The true is any non-zero value and false is 0.
While loop Flowchart<br>
 <br>
<h2>Loop Control Statements</h2>
We can change the normal sequence of while loop's execution using the loop control statement. When the while loop's execution is completed, all automatic objects defined in that scope are demolished. Python offers the following control statement to use within the while loop.
<br><b>1. Continue Statement -</b> When the continue statement is encountered, the control transfer to the beginning of the loop. Let's understand the following example.<br>
Example:
1.	# prints all letters except 'a' and 't'   <br>
2.	i = 0  <br>
3.	str1 = 'javatpoint'  <br>
4.	  <br>
5.	while i < len(str1):   <br>
6.	    if str1[i] == 'a' or str1[i] == 't':   <br>
7.	        i += 1  <br>
8.	        continue  <br>
9.	    print('Current Letter :', a[i])   <br>
10.	    i += 1  <br><br>
<b>Output:</b><br>
Current Letter : j<br>
Current Letter : v<br>
Current Letter : p<br>
Current Letter : o<br>
Current Letter : i<br>
Current Letter : n<br><br>
<b>2. Break Statement -</b> When the break statement is encountered, it brings control out of the loop.<br>
Example:<br>
1.	# The control transfer is transfered  <br>
2.	# when break statement soon it sees t  <br>
3.	i = 0  <br>
4.	str1 = 'javatpoint'  <br>
5.	  <br>
6.	while i < len(str1):   <br>
7.	    if str1[i] == 't':   <br>
8.	        i += 1  <br>
9.	        break  <br>
10.	    print('Current Letter :', str1[i])  <br> 
11.	    i += 1  <br>
<b>Output:</b><br>
Current Letter : j<br>
Current Letter : a<br>
Current Letter : v<br>
Current Letter : a<br><br>
<b>3. Pass Statement -</b> The pass statement is used to declare the empty loop. It is also used to define empty class, function, and control statement. Let's understand the following example.
<br>Example -<br>
1.	# An empty loop   <br>
2.	str1 = 'javatpoint'  <br>
3.	i = 0  <br>
4.	  <br>
5.	while i < len(str1):   <br>
6.	    i += 1  <br>
7.	    pass  <br>
8.	print('Value of i :', i)  <br>
Output:<br><br>
Value of i : 10<br><br>
Example-1: Program to print 1 to 10 using while loop<br>
1.	i=1  <br>
2.	#The while loop will iterate until condition becomes false.  <br>
3.	While(i<=10):    <br>
4.	    print(i)   <br>
5.	    i=i+1   <br>
<b>Output:</b><br>
1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>



</div>
<br><br>
<div class="footer">
	<div class="f-bg-w3l">
		<div class="container">
			<div class="col-md-4 w3layouts_footer_grid">
				<h2>Follow <span>Us</span></h2>
				<ul class="social_agileinfo">
					<li><a href="#" class="w3_facebook"><i class="fa fa-facebook"></i></a></li>
					<li><a href="#" class="w3_twitter"><i class="fa fa-twitter"></i></a></li>
					<li><a href="#" class="w3_instagram"><i class="fa fa-instagram"></i></a></li>
					<li><a href="#" class="w3_google"><i class="fa fa-google-plus"></i></a></li>
				</ul>
			</div>
			<div class="col-md-8 w3layouts_footer_grid">
				
				<ul class="w3l_footer_nav">
					
					<li><a href="/python">Python</a></li>
					<li><a href="/java">Java </a></li>
					<li><a href="/data-structure">Data Structures</a></li>
				</ul>
				<p>©2021 Code Masters All Rights Reserved.</a></p>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
</div>

</body>
</html>